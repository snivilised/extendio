package i18n

import (
	"github.com/nicksnyder/go-i18n/v2/i18n"
)

// see https://dave.cheney.net/2014/12/24/inspecting-errors
//
// The requirement for localisation runs counter to that
// explained in this article, in particular the definition
// of typed errors increasing the api surface of a package
// and therefore makes the api more brittle. This issue is
// due-ly noted, but if translations are important, then we
// have to live with this problem unless another approach
// is available. Its not really recommended to provide foreign
// translations for external packages as this creates as
// undesirable coupling, but the option is there just in case.
// To ameliorate api surface area issue, limit error definitions
// to those errors that are intended to be displayed to
// the end user. Internal errors that can be handled, should not
// have translations templates defined for them as the user
// won't see them.
//
// As is presented in the article, clients are better off
// asserting errors for behaviour, not type, but this aspect
// should not be at cross purposes with the requirement for
// localisation.
//
//  In summary then, for ...
//
// * package authors: provide predicate interface definitions
// for errors that can be handled, eg "Timeout() bool". Also,
// use errors.Wrap to add context to another error.
// * package users: don't check an error's type, query for the
// declared interface, and invoke the provide predicates as
// to determine an actual error criteria
//
// An alternative to providing foreign translations is just
// to handle the 3rd party error and Wrapping it up with a
// local error in the desired language. Sure, the inner error
// will be defined in the library's default language, but that
// can be wrapped (errors.Wrap), providing content in the
// required but library un-supported language.
//

type extendioTemplData struct{}

func (td extendioTemplData) SourceId() string {
	return EXTENDIO_SOURCE_ID
}

// This file is automatically processed to create the active.en.json
// by running:
// $ goi18n extract -format json

// third party un-translated error
type ThirdPartyErrorTemplData struct {
	extendioTemplData

	Error string
}

func (td ThirdPartyErrorTemplData) Message() *i18n.Message {
	return &i18n.Message{
		ID:          "third-party-error.extendio",
		Description: "These errors are generated by dependencies that don't support localisation",
		Other:       "Third Party Error: '{{.Error}}'",
	}
}

// terminate traverse
type TerminateTraverseTemplData struct {
	extendioTemplData
	Reason string
}

func (td TerminateTraverseTemplData) Message() *i18n.Message {
	return &i18n.Message{
		ID:          "terminate-traverse.extendio",
		Description: "Traversal terminated",
		Other:       "Terminate Traversal: '{{.Reason}}'",
	}
}

// not a directory
type NotADirectoryTemplData struct {
	extendioTemplData
	Path string
}

func (td NotADirectoryTemplData) Message() *i18n.Message {
	return &i18n.Message{
		ID:          "not-a-directory.extendio",
		Description: "File system path is not a directory",
		Other:       "File system path '{{.Path}}', is not a directory",
	}
}

// not a directory (internal)
type SortFnFailedTemplData struct {
}

func (td SortFnFailedTemplData) Message() *i18n.Message {
	return &i18n.Message{
		ID:          "sort-fn-failed.internal.extendio",
		Description: "Sort function failed (internal error)",
		Other:       "Sort function failed (internal error)",
	}
}

// missing callback (internal)
type MissingCallbackTemplData struct {
}

func (td MissingCallbackTemplData) Message() *i18n.Message {
	return &i18n.Message{
		ID:          "missing-callback.internal.extendio",
		Description: "Missing callback (internal error)",
		Other:       "Missing callback (internal error)",
	}
}
